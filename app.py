import streamlit as st 
from streamlit_option_menu import option_menu
from dotenv import load_dotenv
import os 
import openai
#from diffusers import StableDiffusionPipeline
import torch

load_dotenv()
openai.api_key = os.getenv("OPENAI_API_KEY")

#function to generate AI based images using OpenAI Dall-E
def generate_images_using_openai(text):
    response = openai.Image.create(prompt= text, n=1, size="512x512")
    image_url = response['data'][0]['url']
    return image_url


#function to generate AI based images using Huggingface Diffusers
def generate_images_using_huggingface_diffusers(text):
    #pipe = StableDiffusionPipeline.from_pretrained("runwayml/stable-diffusion-v1-5", torch_dtype=torch.float16)
    pipe = pipe.to("cuda")
    prompt = text
    image = pipe(prompt).images[0] 
    return image

#Streamlit Code
st.sidebar.info("ü§ñ Application settings ü§ñ")
sd1, sd2 = st.sidebar.columns(2)
lm = sd1.selectbox("Selec tmodel text for generation", ["Lama", "Mistral", "GPT"])
text2speech = st.sidebar.radio("Text to speech üëá", ["Actve", "Inactve"], horizontal=True)
st.sidebar.info("üè∞ Fairy Tail  settings üè∞")
image_model = sd2.selectbox("Select model for image generation", ["Huggingface Diffusers","OpenJourney", "DALL-E"])
sd1, sd2 = st.sidebar.columns(2)
gender = sd1.radio("Select gender ", ["Boy", "Girl", "Diverse"], horizontal=True)
child_name = sd2.text_input(label="Enter child's name ",placeholder="Optional")
age = st.sidebar.select_slider(
    "Select kid's age",
    options=[1,2,3,4,5,6,7,8,9,10,11,12],value=5)
#text2speech_yes = sd1.checkbox( "Text to speech - actve")
#text2speech_no = sd2.checkbox( "Text to speech - inactve")

characters = st.sidebar.text_input(label="Which characters you want to be included ?", placeholder="Shrek, Cat in boots  ... ")
mood = st.sidebar.text_input(
    label="Mood (e.g. inspirational, funny, serious) (optional)",
    placeholder="inspirational",
)

app_mode =option_menu(
        menu_title=None,
        options=['Main screen','About this app'],
        icons=['bi-house-fill','bi-info-square-fill'],
        orientation="horizontal"
    )
if app_mode == 'Main screen':
    st.subheader("This is a Fairy Tale Generation App that uses AI to generates text and images from text prompt.")
    input_prompt = st.text_area(label="Enter a fairy tale description for generation", placeholder="A fairy tail about princess Freya ... ")
    if input_prompt is not None:
        if st.button("Generate Fairy Tail"):
            st.success("The story was generated ‚úÖ")
            st.balloons()
            #image_url = generate_images_using_openai(input_prompt)
            #st.image(image_url, caption="Generated by DALL-E")

# if choice == "Home":
#     st.title("AI Fairy Tale Generation App")
#     with st.expander("About the App"):
#         st.write("This is a Fairy Tale Generation App that uses AI to generates text and images from text prompt.")

# elif choice == "DALL-E":
#     st.subheader("Image generation using Open AI's DALL-E")
#     input_prompt = st.text_input("Enter your text prompt")
#     if input_prompt is not None:
#         if st.button("Generate Image"):
#             image_url = generate_images_using_openai(input_prompt)
#             st.image(image_url, caption="Generated by DALL-E")

# elif choice == "Huggingface Diffusers":
#     st.subheader("Image generation using Huggingface Diffusers")
#     input_prompt = st.text_input("Enter your text prompt")
#     if input_prompt is not None:
#         if st.button("Generate Image"):
#             image_output = generate_images_using_huggingface_diffusers(input_prompt)
#             st.info("Generating image.....")
#             st.success("Image Generated Successfully")
#             st.image(image_output, caption="Generated by Huggingface Diffusers")
